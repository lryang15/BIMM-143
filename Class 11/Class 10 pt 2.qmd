---
title: "Class 10: Comparative analysis of structure & Class 11: Alpha Fold"
author: "Lena (A16420052)"
format: pdf
editor: visual
---

## Comparative structure analysis of Adenylate Kinase

We need some packages for today's class. These include `bio3d` and `msa`

The `msa` package is from Bioconductor. These packages focus on genomics type work and are managed by the `BiocManager` package.

Install `install.packages("BiocManager")` and then `BiocManager::install("msa")`

```{r}
library(bio3d)

aa <- get.seq("1ake_A")
aa
```

Now I can search the PDB database for related seuqences:

```{r}
# Blast or hmmer search 
#b <- blast.pdb(aa)
```

```{r}
#hits <-  plot(b)
```

```{r}
#attributes(b)
# List out some 'top hits'
#head(b$hit.tbl)
```

These are the related structures in the PDB database that we found via a BLAST search...

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

Side-note: Lets annotate these structures (in other words find out what they are, what species they are from, stuff about the experiment they were solved in etc.)

For this we can use the `pdb.annotate()`

```{r}
anno <- pdb.annotate(hits$pdb.id)
head(anno)
```

Now we can download all these structures for further analysis with the `get.pdb()` function.

```{r}
# Download releated PDB files
#gzips file size smaller, path creates folder of current directory 
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

Now we have all of these related structures we can Align and Superpose...

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```

## Principal Component Analysis

```{r}
#perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```

```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

## Alpha Fold

The top hit is Peptidase A2 domain-containing protein from Thalassobius mangrovi

![](HIVPR_MONOMER.png)

## Custom analysis of resulting models

```{r}
library(bio3d)
results_dir <- "hivpr_dimer_23119/"
```

```{r}
library(bio3d)
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
pdb_files
```

```{r}
# Read all data from Models 
#  and superpose/fit coords
#pdbs <- pdbaln(pdb_files, fit=TRUE)
```

Previous code results in an error message.

```{r}
# Optionally install the MSA package for use with pdbaln()
#install.packages("BiocManager")
#BiocManager::install("msa")

pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
pdbs
```

Calculate the RMSD between all models.

```{r}
rd <- rmsd(pdbs)
range(rd)
```

```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)

```

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

```{r}
plotb3(pdbs$b, typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

Improve the superposition/fitting of our models by finding the most consistent "rigid core" common across all the models. For this we will use the core.find() function:

```{r}
core <- core.find(pdbs)
```

Use the identified core atom positions as a basis for a more suitable superposition:

```{r}
core.inds <- print(core, vol=0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

![](HIVPR_DIMER.png)

```{r}
rd <- rmsd(xyz)
```

```{r}
# Change the names for easy reference
colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

Predicted Alignment Error (PAE) for domains

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```

For PAE values the lower the better

Plot these with ggplot or with functions from the Bio3D package:

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```

Plot with `plot.dmat()` function

```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

The residue conservation from alignment file

```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
dim(aln$ali)
```

Score residue conservation in the alignment with the `conserv()` function.

```{r}
sim <- conserv(aln)
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"))
```

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```

![](M1_CONSERV.PDB.png)
