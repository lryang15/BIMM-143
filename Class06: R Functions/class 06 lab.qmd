---
title: "Class 06"
author: "Lena (A16420052)"
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute stuff, plot stuff, etc. etc. 

R makes writing functions accessible but we should always start by trying to get a working snippet of code first before we write our function

##Todays lab

We will grade a whole class of student assignments. We will always try to start with a simplified version of the problem. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

If we want the average we can use the `mean()` function
```{r}
mean(student1)
```

Let's be nice instructor and drop the lowest score so the answer should be zero.
`na.rm`
`which.max()`
```{r}
lowest_score <- min(student1)
mean(student1, na.omit(lowest_score))
```

I found the `which.min()` function that may be helpful here. How does it work?
```{r}
student1
which.min(student1)
student1[8]
```

I can use the minus syntax trick to get everything but the element with the min value 
```{r}
student1[which.min(student1)]
student1[-8]
student1[-which.min(student1)]
```

I have my first snippet of code ;)
```{r}
mean(student1[-which.min(student1)])
```

Let's test on the other students
```{r}
mean(student2[-which.min(student2)])
```

Where is the problem? - oh it is the `mean()` with NA input returns NA by default. We can use `na.rm` argument. 
```{r}
mean(student2, na.rm=TRUE)
```
```{r}
student3
mean(student3, na.rm=TRUE)
```

No bueno. We need to fix this!

I want to stop working with `student1`, `student2`, etc. and typing it out every time so lets instead work with an input called `x`

```{r}
x <- student2
x
```

We want to overwrite the NA values with zero - if you miss a homework you scored zero on this homework.
Google and chat.gpt told me `is.na` will return is vector that is TRUE/FALSE
NA will == 0

```{r}
is.na(x) 
x[is.na(x)]
x[is.na(x)] <- 0
x
#this turns all NA values in student2 == 0
mean(x[-which.min(x)])

```
subset the vector with `[is.na(x)] <-0`
We can use logicals to index a vector 
```{r}
y <- 1:5
y
y>3
y[y>3]
y[y>3] <- 100
```

This is my snippet of working code that solves the problem for all my example student inputs ;)
```{r}
x <- student3
#mask NA values to 0
x[is.na(x)] <- 0
x
#-which.min drops the lowest score
mean(x[-which.min(x)])
```

>Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade <- function(x){
  #mask NA values to 0
  x[is.na(x)] <- 0
  #drop lowest score and get the mean
  mean(x[-which.min(x)])
}
```

Use this function
```{r}
grade(student3)
```

```{r}
gradebook <-read.csv("https://tinyurl.com/gradeinput", row.names = 1)
gradebook
```

>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

Apply Functions over array margins
```{r}
x <- gradebook
#set NA values to 0
x[is.na(x)] <- 0
#Use `apply()` function to return list of values; 1= rows, 2= columns
top_student <- apply(gradebook, 1, grade)
top_student
which.max(top_student)

#which.max(apply(gradebook, 1, grade))
```
>Q3.From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

We could calculate the `mean()` score for each hw
```{r}
#mask NA values in gradebook
mask.grade <- gradebook
mask.grade[is.na(mask.grade)] <- 0
hw.ave <- apply(mask.grade, 2, mean)
which.min(hw.ave)

#na.rm omits NA values, it doesn't mask it as 0 
```

we could do the sum 
```{r}
apply(gradebook, 2, sum, na.rm=T)
which.min(apply(gradebook, 2, sum, na.rm=T))
```

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


```{r}
#mask.grade is masking all NA values in gradebook
apply(mask.grade, 2, cor, y=top_student)
#correlation between coloums=hw scores and top student scores
which.max(apply(mask.grade, 2, cor, y=top_student))
```


>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmark- down”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]



